In this kata, you will write a function that returns the positions and the values of the "peaks" (or local maxima) of a numeric array.

For example, the array arr = [0, 1, 2, 5, 1, 0] has a peak at position 3 with a value of 5 (since arr[3] equals 5).

The output will be returned as a ``Map<String,List>with two key-value pairs:"pos"and"peaks". If there is no peak in the given array, simply return {"pos" => [], "peaks" => []}`.

Example: pickPeaks([3, 2, 3, 6, 4, 1, 2, 3, 2, 1, 2, 3]) should return {pos: [3, 7], peaks: [6, 3]} (or equivalent in other languages)

All input arrays will be valid integer arrays (although it could still be empty), so you won't need to validate the input.

The first and last elements of the array will not be considered as peaks (in the context of a mathematical function, we don't know what is after and before and therefore, we don't know if it is a peak or not).

Also, beware of plateaus !!! [1, 2, 2, 2, 1] has a peak while [1, 2, 2, 2, 3] and [1, 2, 2, 2, 2] do not. In case of a plateau-peak, please only return the position and value of the beginning of the plateau. For example: pickPeaks([1, 2, 2, 2, 1]) returns {pos: [1], peaks: [2]} (or equivalent in other languages)

Have fun!
Code -import java.util.Map;
      import java.util.List;
      import java.util.*;

      public class PickPeaks {

          public static Map<String,List<Integer>> getPeaks(int[] arr) {
              // Your code here!
            Map<String ,List<Integer>> mp = new HashMap<>();
            List<Integer> pos = new ArrayList<>();
            List<Integer> peek = new ArrayList<>();


              for (int i = 1; i < arr.length-1 ; i++)
                {
                if (arr[i] > arr[i-1] && arr[i] >= arr[i+1])
                  {

                   int index = i ;
                  while (i < arr.length-2&& arr[i] == arr[i+1])
                    {
                    i++;
                  }
                  if (i < arr.length-1 && arr[i] > arr[i+1]) {
                          pos.add(index);
                          peek.add(arr[index]);
                      }
              }
                }
            mp.put("pos",pos);
            mp.put("peaks",peek);
            return mp ;
          }
      }
   2.If we were to set up a Tic-Tac-Toe game, we would want to know whether the board's current state is solved, wouldn't we? Our goal is to create a function that will check that for us!

     Assume that the board comes in the form of a 3x3 array, where the value is 0 if a spot is empty, 1 if it is an "X", or 2 if it is an "O", like so:

     [[0, 0, 1],
      [0, 1, 2],
      [2, 1, 0]]
     We want our function to return:

     -1 if the board is not yet finished AND no one has won yet (there are empty spots),
     1 if "X" won,
     2 if "O" won,
     0 if it's a cat's game (i.e. a draw).
     You may assume that the board passed in is valid in the context of a game of Tic-Tac-Toe.

     Code -public class Solution {

               public static int isSolved(int[][] board) {
                   // your code here
                 int whoWon = checkWinner(board);
                   boolean isFull = true;
                   for (int i = 0; i < board.length; i++) {
                       for (int j = 0; j < board[0].length; j++) {
                           if (board[i][j] == 0) {
                               isFull = false;
                               break;
                           }
                       }
                       if (!isFull) {
                           break;
                       }
                   }

                   if (whoWon == 0 && !isFull) {
                       return -1;
                   } else if (whoWon == 1) {
                       return 1;
                   } else if (whoWon == 2) {
                       return 2;
                   } else {
                       return 0;
                   }
               }

              private  static int  checkWinner(int[][] board) {

                   for (int i = 0; i < 3; i++) {
                       if (board[i][0] != 0 && board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
                           return board[i][0];
                       }
                   }


                   for (int j = 0; j < 3; j++) {
                       if (board[0][j] != 0 && board[0][j] == board[1][j] && board[0][j] == board[2][j]) {
                           return board[0][j];
                       }
                   }


                   if (board[0][0] != 0 && board[0][0] == board[1][1] && board[0][0] == board[2][2]) {
                       return board[0][0];
                   }
                   if (board[0][2] != 0 && board[0][2] == board[1][1] && board[0][2] == board[2][0]) {
                       return board[0][2];
                   }

                   return 0 ;
               }
           }

       3.Complete the function that

         accepts two integer arrays of equal length
         compares the value each member in one array to the corresponding member in the other
         squares the absolute value difference between those two values
         and returns the average of those squared absolute value difference between each member pair.
         Code1-ublic class Solution {
                 public static double solution(int[] arr1, int[] arr2) {
                   int n = arr1.length;
                   double sum=0;
                   int[] arr3 = new int[n];
                   int j = 0 ;
                   for (int i = 0 ; i < arr1.length ; i++)
                     {
                        int diff = Math.abs(arr1[i] - arr2[i]);
                        arr3[j++] = diff ;
                   }
                   for (int i = 0 ; i < arr3.length ; i++)
                     {
                       sum += arr3[i]*arr3[i];
                   }
                   double average = sum /n ;
                   return average ;
                 }
               }
              code2-import java.util.stream.IntStream;

                    import java.util.stream.IntStream;

                    public class Solution
                    {
                       public static double solution(int[] arr1, int[] arr2)
                       {
                          return IntStream.range(0, arr1.length)
                             .map(index -> arr1[index] - arr2[index])
                             .map(diff -> diff * diff)
                             .average().orElse(0);
                       }
                    }
4.Given an unsorted array of integer values, find the maximum positive sum of any contiguous range within the array.
 An array containing only negative values can return 0. Your solution should be efficient enough to not throw a timeout exception.
                      public class Kata{
                          public static int maxContiguousSum(final int[] arr) {
                            if (arr.length == 0)
                              return 0 ;
                              int sum = arr[0];
                            int currsum = arr[0];

                            for (int i = 1 ; i <arr.length ; i++)
                              { currsum = Math.max (arr[i] , currsum+arr[i]);
                                sum = Math.max(sum , currsum);

                            }
                            return Math.max(sum,0) ;
                          }
                      }
   5.Move the first letter of each word to the end of it, then add "ay" to the end of the word. Leave punctuation marks untouched.
   Code -public class PigLatin {


             public static String pigIt(String str) {
                 StringBuilder sb = new StringBuilder();
                 String[] words = str.split("\\s+");

                 for (int i = 0; i < words.length; i++) {
                     if (i > 0) {
                         sb.append(" ");
                     }

                     String word = words[i];
                     if (word.matches("[a-zA-Z]+")) {
                         String pigLatinWord = word.substring(1) + word.charAt(0) + "ay";
                         sb.append(pigLatinWord);
                     } else {

                         sb.append(word);
                     }
                 }

                 return sb.toString();
             }
         }